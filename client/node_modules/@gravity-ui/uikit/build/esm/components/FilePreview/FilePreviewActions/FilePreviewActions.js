import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import { EllipsisVertical } from '@gravity-ui/icons';
import { useUniqId } from "../../../hooks/useUniqId/index.js";
import { ActionTooltip } from "../../ActionTooltip/index.js";
import { Button } from "../../Button/index.js";
import { Icon } from "../../Icon/index.js";
import { List } from "../../List/index.js";
import { Sheet } from "../../Sheet/index.js";
import { Text } from "../../Text/index.js";
import { useMobile } from "../../mobile/index.js";
import { block } from "../../utils/cn.js";
import "./FilePreviewActions.css";
const cn = block('file-preview-actions');
const renderListItem = (item) => {
    return (_jsxs("div", { className: cn('mobile-list-item'), children: [item.icon, _jsx(Text, { variant: "body-2", title: item.title, ellipsis: true, children: item.title })] }));
};
export const FilePreviewActions = ({ actions, fileName, hoverabelPanelClassName, isCustomImage, }) => {
    const id = useUniqId();
    const mobile = useMobile();
    const [showMobileMenu, setShowMobileMenu] = React.useState(false);
    const handleMobileMenuClose = React.useCallback(() => {
        setShowMobileMenu(false);
    }, []);
    const handleItemClick = React.useCallback((item, _, __, event) => {
        if (event) {
            // function can be called only on a mobile device
            item.onClick?.(event);
        }
        setShowMobileMenu(false);
    }, []);
    if (!actions?.length) {
        return null;
    }
    const handleMobileButtonClick = () => {
        setShowMobileMenu(true);
    };
    if (mobile) {
        const buttonView = isCustomImage ? 'raised' : 'flat';
        return (_jsxs(React.Fragment, { children: [_jsx(Button, { view: buttonView, className: cn('mobile-actions-menu'), onClick: handleMobileButtonClick, size: "s", children: _jsx(Icon, { data: EllipsisVertical, height: 16, width: 16 }) }), _jsx(Sheet, { className: cn('mobile-sheet'), visible: showMobileMenu, onClose: handleMobileMenuClose, title: fileName, children: _jsx(List, { items: actions, filterable: false, renderItem: renderListItem, itemHeight: 44, virtualized: false, onItemClick: handleItemClick }) })] }));
    }
    return (_jsx("div", { className: cn('desktop-actions', hoverabelPanelClassName), children: actions.map(({ title, icon, onClick, disabled, tooltipExtraProps, ...props }, index) => {
            const extraProps = props.href
                ? { ...props.extraProps, href: props.href }
                : props.extraProps;
            return (_jsx(ActionTooltip, { title: title, ...tooltipExtraProps, children: _jsx(Button, { onClick: onClick, "aria-describedby": `${id}-${index}`, view: "raised", pin: "circle-circle", disabled: disabled, size: "s", className: cn('desktop-action-button'), "aria-label": title, ...extraProps, children: _jsx("div", { className: cn('action-icon-wrapper'), children: icon }) }) }, `${id}-${index}`));
        }) }));
};
//# sourceMappingURL=FilePreviewActions.js.map
