{"version":3,"file":"Col.js","sourceRoot":"../../../../../src","sources":["components/layout/Col/Col.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAMb,OAAO,EAAC,KAAK,EAAC,0BAAuB;AACrC,OAAO,EAAC,gBAAgB,EAAC,qCAAkC;AAE3D,OAAO,EAAC,UAAU,EAAC,0BAAiB;AAEpC,mBAAoB;AAEpB,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;AAQvB;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,GAAG,KAAK,EAAW,EAAE,EAAE;IACxE,MAAM,EAAC,oBAAoB,EAAC,GAAG,gBAAgB,EAAE,CAAC;IAClD,MAAM,YAAY,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;IAEjD,OAAO,CACH,cACI,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,EAAC,EAAE,SAAS,CAAC,aAC3E,EAAE,YAEV,QAAQ,GACP,CACT,CAAC;AACN,CAAC,CAAC","sourcesContent":["'use client';\n\n/* eslint-disable valid-jsdoc */\nimport type * as React from 'react';\n\nimport type {QAProps} from '../../types';\nimport {block} from '../../utils/cn';\nimport {useLayoutContext} from '../hooks/useLayoutContext';\nimport type {ColSize, MediaPartial} from '../types';\nimport {makeCssMod} from '../utils';\n\nimport './Col.scss';\n\nconst b = block('col');\n\nexport interface ColProps extends MediaPartial<ColSize>, QAProps {\n    className?: string;\n    style?: React.CSSProperties;\n    children?: React.ReactNode;\n}\n\n/**\n * How many columns of you 12-th column layout will take content.\n * Must be used as a child of `Row` component.\n *\n * By default component takes all available space.\n * If you wont to specify static size to all media queries use `s` prop. In mobile first layout grid is first passible value.\n *\n * ```tsx\n * <Col s=\"12\">some content</Col>\n * ```\n * ---\n *\n * Note: you can use this empty component for spacing:\n *\n * ```tsx\n * <Row>\n *  <Col s=\"2\" l=\"1\">col 2</Col>\n *  <Col />\n *  <Col s=\"2\" l=\"1\">col 2</Col>\n * </Row>\n * ```\n * ---\n * Storybook - https://preview.gravity-ui.com/uikit/?path=/docs/layout--playground#col\n */\nexport const Col = ({children, style, className, qa, ...media}: ColProps) => {\n    const {getClosestMediaProps} = useLayoutContext();\n    const sizeModValue = getClosestMediaProps(media);\n\n    return (\n        <div\n            style={style}\n            className={b({size: sizeModValue ? makeCssMod(sizeModValue) : undefined}, className)}\n            data-qa={qa}\n        >\n            {children}\n        </div>\n    );\n};\n\n/**\n * Possible improvements that the customer is looking for:\n * - props for vertical alignment in row;\n * - offset;\n * - media only. Rule that will be applied only in specified media query;\n * - content alignment;\n */\n"]}