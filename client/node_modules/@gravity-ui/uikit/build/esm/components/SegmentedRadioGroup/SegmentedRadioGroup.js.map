{"version":3,"file":"SegmentedRadioGroup.js","sourceRoot":"../../../../src","sources":["components/SegmentedRadioGroup/SegmentedRadioGroup.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,aAAa,EAAC,qCAA4B;AAElD,OAAO,EAAC,KAAK,EAAC,uBAAoB;AAElC,OAAO,EAAC,yBAAyB,IAAI,MAAM,EAAC,uCAAoC;AAEhF,mCAAoC;AAEpC,MAAM,CAAC,GAAG,KAAK,CAAC,uBAAuB,CAAC,CAAC;AAuBzC,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,mBAAmB,CAC5E,KAAkC,EAClC,GAAuC;IAEvC,MAAM,EAAC,IAAI,GAAG,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,QAAQ,EAAC,GAAG,KAAK,CAAC;IAClE,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;IAE5B,IAAI,CAAC,OAAO,EAAE,CAAC;QACX,OAAO,GACH,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAClC,CAAC,GAAG,CAAC,CAAC,EAAC,KAAK,EAAE,WAAW,EAAC,EAAE,EAAE,CAAC,CAAC;YAC7B,KAAK,EAAE,WAAW,CAAC,KAAK;YACxB,OAAO,EAAE,WAAW,CAAC,OAAO,IAAI,WAAW,CAAC,QAAQ;YACpD,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,KAAK,EAAE,WAAW,CAAC,KAAK;SAC3B,CAAC,CAAC,CAAC;IACR,CAAC;IAED,MAAM,EAAC,cAAc,EAAE,YAAY,EAAC,GAAG,aAAa,CAAC,EAAC,GAAG,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC;IAE1E,OAAO,CACH,iBACQ,cAAc,EAClB,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,EAAE,SAAS,CAAC,aAC7B,EAAE,YAEV,YAAY,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAC/B,eAAC,MAAM,OAAK,WAAW,EAAE,GAAG,EAAE,WAAW,CAAC,KAAK,GAAI,CACtD,CAAC,GACA,CACT,CAAC;AACN,CAAC,CAAgD,CAAC;AAElD,mBAAmB,CAAC,MAAM,GAAG,MAAM,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {useRadioGroup} from '../../hooks/private';\nimport type {ControlGroupOption, ControlGroupProps, DOMProps, QAProps} from '../types';\nimport {block} from '../utils/cn';\n\nimport {SegmentedRadioGroupOption as Option} from './SegmentedRadioGroupOption';\n\nimport './SegmentedRadioGroup.scss';\n\nconst b = block('segmented-radio-group');\n\n// export type SegmentedRadioGroupOption<T extends string = string> = ControlGroupOption<T>;\nexport type SegmentedRadioGroupSize = 's' | 'm' | 'l' | 'xl';\nexport type SegmentedRadioGroupWidth = 'auto' | 'max';\n\nexport interface SegmentedRadioGroupProps<T extends string = string>\n    extends ControlGroupProps<T>,\n        DOMProps,\n        QAProps {\n    size?: SegmentedRadioGroupSize;\n    width?: SegmentedRadioGroupWidth;\n    children?:\n        | React.ReactElement<ControlGroupOption<T>>\n        | React.ReactElement<ControlGroupOption<T>>[];\n}\n\ntype SegmentedRadioGroupComponentType = (<T extends string>(\n    props: SegmentedRadioGroupProps<T> & {ref?: React.ForwardedRef<HTMLDivElement>},\n) => React.JSX.Element) & {\n    Option: typeof Option;\n};\n\nexport const SegmentedRadioGroup = React.forwardRef(function SegmentedRadioGroup<T extends string>(\n    props: SegmentedRadioGroupProps<T>,\n    ref: React.ForwardedRef<HTMLDivElement>,\n) {\n    const {size = 'm', width, style, className, qa, children} = props;\n    let options = props.options;\n\n    if (!options) {\n        options = (\n            React.Children.toArray(children) as React.ReactElement<ControlGroupOption<T>>[]\n        ).map(({props: optionProps}) => ({\n            value: optionProps.value,\n            content: optionProps.content || optionProps.children,\n            disabled: optionProps.disabled,\n            title: optionProps.title,\n        }));\n    }\n\n    const {containerProps, optionsProps} = useRadioGroup({...props, options});\n\n    return (\n        <div\n            {...containerProps}\n            ref={ref}\n            style={style}\n            className={b({size, width}, className)}\n            data-qa={qa}\n        >\n            {optionsProps.map((optionProps) => (\n                <Option {...optionProps} key={optionProps.value} />\n            ))}\n        </div>\n    );\n}) as unknown as SegmentedRadioGroupComponentType;\n\nSegmentedRadioGroup.Option = Option;\n"]}