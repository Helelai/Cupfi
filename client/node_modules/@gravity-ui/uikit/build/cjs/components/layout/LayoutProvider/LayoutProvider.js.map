{"version":3,"file":"LayoutProvider.js","sourceRoot":"../../../../../src","sources":["components/layout/LayoutProvider/LayoutProvider.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AAmBb,sDAcC;;;AA/BD,gCAAgC;AAChC,qDAA+B;AAE/B,gEAAwD;AACxD,uFAA+E;AAE/E,yEAAiE;AAWjE,SAAgB,qBAAqB,CAAC,EAClC,QAAQ,EACR,MAAM,EAAE,QAAQ,EAChB,iBAAiB,GACQ;IACzB,MAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,6BAAa,CAAC,CAAC;IACtD,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CACvB,GAAG,EAAE,CAAC,IAAA,yCAAmB,EAAC,EAAC,KAAK,EAAE,aAAa,CAAC,KAAK,EAAE,QAAQ,EAAC,CAAC,EACjE,CAAC,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAClC,CAAC;IACF,MAAM,gBAAgB,GAAG,IAAA,uDAA0B,EAAC,KAAK,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;IAE1F,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,gBAAgB,EAAE,KAAK,EAAC,CAAC,EAAE,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1F,OAAO,uBAAC,6BAAa,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,YAAG,QAAQ,GAA0B,CAAC;AACrF,CAAC","sourcesContent":["'use client';\n\n/* eslint-disable valid-jsdoc */\nimport * as React from 'react';\n\nimport {LayoutContext} from '../contexts/LayoutContext';\nimport {useCurrentActiveMediaQuery} from '../hooks/useCurrentActiveMediaQuery';\nimport type {LayoutTheme, MediaType, RecursivePartial} from '../types';\nimport {overrideLayoutTheme} from '../utils/overrideLayoutTheme';\n\nexport interface PrivateLayoutProviderProps {\n    config?: RecursivePartial<LayoutTheme>;\n    /**\n     * During ssr you can override default (`s`) media screen size if needed\n     */\n    initialMediaQuery?: MediaType;\n    children: React.ReactNode;\n}\n\nexport function PrivateLayoutProvider({\n    children,\n    config: override,\n    initialMediaQuery,\n}: PrivateLayoutProviderProps) {\n    const parentContext = React.useContext(LayoutContext);\n    const theme = React.useMemo(\n        () => overrideLayoutTheme({theme: parentContext.theme, override}),\n        [override, parentContext.theme],\n    );\n    const activeMediaQuery = useCurrentActiveMediaQuery(theme.breakpoints, initialMediaQuery);\n\n    const value = React.useMemo(() => ({activeMediaQuery, theme}), [activeMediaQuery, theme]);\n    return <LayoutContext.Provider value={value}>{children}</LayoutContext.Provider>;\n}\n"]}