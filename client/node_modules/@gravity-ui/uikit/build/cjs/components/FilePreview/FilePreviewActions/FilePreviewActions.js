"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilePreviewActions = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const React = tslib_1.__importStar(require("react"));
const icons_1 = require("@gravity-ui/icons");
const useUniqId_1 = require("../../../hooks/useUniqId/index.js");
const ActionTooltip_1 = require("../../ActionTooltip/index.js");
const Button_1 = require("../../Button/index.js");
const Icon_1 = require("../../Icon/index.js");
const List_1 = require("../../List/index.js");
const Sheet_1 = require("../../Sheet/index.js");
const Text_1 = require("../../Text/index.js");
const mobile_1 = require("../../mobile/index.js");
const cn_1 = require("../../utils/cn.js");
require("./FilePreviewActions.css");
const cn = (0, cn_1.block)('file-preview-actions');
const renderListItem = (item) => {
    return ((0, jsx_runtime_1.jsxs)("div", { className: cn('mobile-list-item'), children: [item.icon, (0, jsx_runtime_1.jsx)(Text_1.Text, { variant: "body-2", title: item.title, ellipsis: true, children: item.title })] }));
};
const FilePreviewActions = ({ actions, fileName, hoverabelPanelClassName, isCustomImage, }) => {
    const id = (0, useUniqId_1.useUniqId)();
    const mobile = (0, mobile_1.useMobile)();
    const [showMobileMenu, setShowMobileMenu] = React.useState(false);
    const handleMobileMenuClose = React.useCallback(() => {
        setShowMobileMenu(false);
    }, []);
    const handleItemClick = React.useCallback((item, _, __, event) => {
        if (event) {
            // function can be called only on a mobile device
            item.onClick?.(event);
        }
        setShowMobileMenu(false);
    }, []);
    if (!actions?.length) {
        return null;
    }
    const handleMobileButtonClick = () => {
        setShowMobileMenu(true);
    };
    if (mobile) {
        const buttonView = isCustomImage ? 'raised' : 'flat';
        return ((0, jsx_runtime_1.jsxs)(React.Fragment, { children: [(0, jsx_runtime_1.jsx)(Button_1.Button, { view: buttonView, className: cn('mobile-actions-menu'), onClick: handleMobileButtonClick, size: "s", children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { data: icons_1.EllipsisVertical, height: 16, width: 16 }) }), (0, jsx_runtime_1.jsx)(Sheet_1.Sheet, { className: cn('mobile-sheet'), visible: showMobileMenu, onClose: handleMobileMenuClose, title: fileName, children: (0, jsx_runtime_1.jsx)(List_1.List, { items: actions, filterable: false, renderItem: renderListItem, itemHeight: 44, virtualized: false, onItemClick: handleItemClick }) })] }));
    }
    return ((0, jsx_runtime_1.jsx)("div", { className: cn('desktop-actions', hoverabelPanelClassName), children: actions.map(({ title, icon, onClick, disabled, tooltipExtraProps, ...props }, index) => {
            const extraProps = props.href
                ? { ...props.extraProps, href: props.href }
                : props.extraProps;
            return ((0, jsx_runtime_1.jsx)(ActionTooltip_1.ActionTooltip, { title: title, ...tooltipExtraProps, children: (0, jsx_runtime_1.jsx)(Button_1.Button, { onClick: onClick, "aria-describedby": `${id}-${index}`, view: "raised", pin: "circle-circle", disabled: disabled, size: "s", className: cn('desktop-action-button'), "aria-label": title, ...extraProps, children: (0, jsx_runtime_1.jsx)("div", { className: cn('action-icon-wrapper'), children: icon }) }) }, `${id}-${index}`));
        }) }));
};
exports.FilePreviewActions = FilePreviewActions;
//# sourceMappingURL=FilePreviewActions.js.map
