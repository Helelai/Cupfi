'use client';
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modal = Modal;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const React = tslib_1.__importStar(require("react"));
const react_1 = require("@floating-ui/react");
const tabbable_1 = require("tabbable");
const constants_1 = require("../../constants.js");
const hooks_1 = require("../../hooks/index.js");
const private_1 = require("../../hooks/private/index.js");
const Portal_1 = require("../Portal/index.js");
const cn_1 = require("../utils/cn.js");
const filterDOMProps_1 = require("../utils/filterDOMProps.js");
const layer_manager_1 = require("../utils/layer-manager/index.js");
const i18n_1 = tslib_1.__importDefault(require("./i18n/index.js"));
require("./Modal.css");
const b = (0, cn_1.block)('modal');
const TRANSITION_DURATION = 150;
function Modal({ open = false, onOpenChange, keepMounted = false, disableBodyScrollLock = false, disableEscapeKeyDown, disableOutsideClick, initialFocus, returnFocus, disableVisuallyHiddenDismiss, onEscapeKeyDown, onOutsideClick, onClose, onEnterKeyDown, onTransitionIn, onTransitionInComplete, onTransitionOut, onTransitionOutComplete, children, style, contentOverflow = 'visible', className, contentClassName, container, qa, floatingRef, ...restProps }) {
    (0, layer_manager_1.useLayer)({ open, type: 'modal' });
    const handleOpenChange = React.useCallback((isOpen, event, reason) => {
        onOpenChange?.(isOpen, event, reason);
        if (isOpen || !event) {
            return;
        }
        const closeReason = reason === 'escape-key' ? 'escapeKeyDown' : 'outsideClick';
        if (closeReason === 'escapeKeyDown' && onEscapeKeyDown) {
            onEscapeKeyDown(event);
        }
        if (closeReason === 'outsideClick' && onOutsideClick) {
            onOutsideClick(event);
        }
        onClose?.(event, closeReason);
    }, [onOpenChange, onEscapeKeyDown, onOutsideClick, onClose]);
    const { refs, elements, context } = (0, react_1.useFloating)({
        open,
        onOpenChange: handleOpenChange,
    });
    const initialFocusRef = React.useRef(null);
    const handleFloatingRef = (0, hooks_1.useForkRef)(refs.setFloating, initialFocusRef, floatingRef);
    const dismiss = (0, react_1.useDismiss)(context, {
        enabled: !disableOutsideClick || !disableEscapeKeyDown,
        outsidePress: !disableOutsideClick,
        escapeKey: !disableEscapeKeyDown,
    });
    const role = (0, react_1.useRole)(context, { role: 'dialog' });
    const { getFloatingProps } = (0, react_1.useInteractions)([dismiss, role]);
    const { isMounted, status } = (0, react_1.useTransitionStatus)(context, { duration: TRANSITION_DURATION });
    const previousStatus = (0, private_1.usePrevious)(status);
    React.useEffect(() => {
        if (status === 'initial' && previousStatus === 'unmounted') {
            onTransitionIn?.();
        }
        if (status === 'close' && previousStatus === 'open') {
            onTransitionOut?.();
        }
        if (status === 'unmounted' && previousStatus === 'close') {
            onTransitionOutComplete?.();
        }
    }, [previousStatus, status, onTransitionIn, onTransitionOut, onTransitionOutComplete]);
    const handleTransitionEnd = React.useCallback((event) => {
        // There are two simultaneous transitions running at the same time
        // Use specific name to only notify once
        if (status === 'open' &&
            event.propertyName === 'transform' &&
            event.target === elements.floating) {
            onTransitionInComplete?.();
        }
    }, [status, onTransitionInComplete, elements.floating]);
    const handleKeyDown = React.useCallback((event) => {
        if (!onEnterKeyDown || event.key !== constants_1.KeyCode.ENTER || event.defaultPrevented) {
            return;
        }
        const floatingElement = elements.floating;
        if (!floatingElement) {
            return;
        }
        const pathElements = event.nativeEvent.composedPath();
        const index = pathElements.indexOf(floatingElement);
        const nestedElements = index < 0 ? pathElements : pathElements.slice(0, index);
        const nestedFloatingElementIndex = nestedElements.findIndex((el) => el?.hasAttribute('data-floating-ui-focusable'));
        if (nestedFloatingElementIndex < 0) {
            onEnterKeyDown(event.nativeEvent);
            return;
        }
        const hasInnerTabbableElements = nestedElements
            .slice(0, nestedFloatingElementIndex)
            .some((el) => (0, tabbable_1.isTabbable)(el));
        if (!hasInnerTabbableElements) {
            onEnterKeyDown(event.nativeEvent);
        }
    }, [elements.floating, onEnterKeyDown]);
    return isMounted || keepMounted ? ((0, jsx_runtime_1.jsx)(Portal_1.Portal, { container: container, children: (0, jsx_runtime_1.jsx)(react_1.FloatingOverlay, { style: style, className: b({ open }, className), "data-qa": qa, "data-floating-ui-status": status, lockScroll: !disableBodyScrollLock, children: (0, jsx_runtime_1.jsx)("div", { className: b('content-aligner'), children: (0, jsx_runtime_1.jsx)("div", { className: b('content-wrapper'), children: (0, jsx_runtime_1.jsx)(react_1.FloatingFocusManager, { context: context, disabled: !isMounted, modal: isMounted, initialFocus: initialFocus ?? initialFocusRef, returnFocus: returnFocus, visuallyHiddenDismiss: disableVisuallyHiddenDismiss ? false : (0, i18n_1.default)('close'), restoreFocus: true, children: (0, jsx_runtime_1.jsx)("div", { ...(0, filterDOMProps_1.filterDOMProps)(restProps, { labelable: true }), className: b('content', { 'has-scroll': contentOverflow === 'auto' }, contentClassName), ref: handleFloatingRef, ...getFloatingProps({
                                onTransitionEnd: handleTransitionEnd,
                                onKeyDown: handleKeyDown,
                            }), children: children }) }) }) }) }) })) : null;
}
//# sourceMappingURL=Modal.js.map
