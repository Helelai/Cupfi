{"version":3,"file":"TextAreaControl.js","sourceRoot":"../../../../../src","sources":["components/controls/TextArea/TextAreaControl.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AA8Bb,0CAwFC;;;AApHD,qDAA+B;AAE/B,mDAA0C;AAC1C,0CAAqC;AAUrC,MAAM,CAAC,GAAG,IAAA,UAAK,EAAC,WAAW,CAAC,CAAC;AAE7B,MAAM,4BAA4B,GAAG,CAAC,IAKrC,EAAE,EAAE;IACD,MAAM,EAAC,MAAM,EAAE,UAAU,EAAC,GAAG,IAAI,CAAC;IAClC,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;IACvE,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;IAEhF,OAAO,CAAC,MAAM,GAAG,UAAU,GAAG,aAAa,CAAC,GAAG,UAAU,CAAC;AAC9D,CAAC,CAAC;AAEF,SAAgB,eAAe,CAAC,KAAY;IACxC,MAAM,EACF,IAAI,EACJ,EAAE,EACF,QAAQ,EACR,YAAY,EACZ,WAAW,EACX,KAAK,EACL,YAAY,EACZ,UAAU,EACV,YAAY,EACZ,IAAI,EACJ,IAAI,EACJ,OAAO,GAAG,CAAC,EACX,OAAO,EACP,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,MAAM,EACN,SAAS,EACT,OAAO,EACP,UAAU,GACb,GAAG,KAAK,CAAC;IACV,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAsB,IAAI,CAAC,CAAC;IAChE,MAAM,SAAS,GAAG,IAAA,kBAAU,EAAC,UAAU,EAAE,eAAe,CAAC,CAAC;IAC1D,MAAM,YAAY,GAAG,IAAI,IAAI,OAAO,CAAC;IACrC,MAAM,UAAU,GAAG,KAAK,IAAI,eAAe,EAAE,OAAO,EAAE,KAAK,CAAC;IAE5D,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACxC,MAAM,OAAO,GAAG,eAAe,EAAE,OAAO,CAAC;QAEzC,IAAI,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;YACnB,MAAM,aAAa,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAChD,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;YAC/E,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;YAC/E,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,CAAC;YACrF,MAAM,uBAAuB,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;YAC5E,MAAM,mBAAmB,GAAG,4BAA4B,CAAC;gBACrD,MAAM,EAAE,OAAO,CAAC,YAAY;gBAC5B,UAAU;gBACV,aAAa;gBACb,UAAU;aACb,CAAC,CAAC;YAEH,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;YAE9B,IAAI,OAAO,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,uBAAuB,CAAC,EAAE,CAAC;gBAC9E,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,OAAO,GAAG,UAAU,GAAG,CAAC,GAAG,UAAU,IAAI,CAAC;YACxE,CAAC;iBAAM,IAAI,uBAAuB,GAAG,CAAC,IAAI,mBAAmB,GAAG,CAAC,EAAE,CAAC;gBAChE,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,OAAO,CAAC,YAAY,IAAI,CAAC;YACvD,CAAC;QACL,CAAC;IACL,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;IAEhC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,YAAY,EAAE,CAAC;IACnB,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IAEhC,OAAO,CACH,wCACQ,YAAY,EAChB,GAAG,EAAE,SAAS,EACd,KAAK,EAAE;YACH,GAAG,YAAY,CAAC,KAAK;YACrB,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;SACpC,EACD,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,YAAY,CAAC,SAAS,CAAC,EAC/C,IAAI,EAAE,IAAI,EACV,EAAE,EAAE,EAAE,EACN,QAAQ,EAAE,QAAQ,EAClB,WAAW,EAAE,WAAW,EACxB,KAAK,EAAE,KAAK,EACZ,YAAY,EAAE,YAAY,EAC1B,IAAI,EAAE,YAAY,EAClB,SAAS,EAAE,SAAS,EACpB,YAAY,EAAE,YAAY,EAC1B,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,SAAS,EACpB,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,QAAQ,IAAI,YAAY,CAAC,QAAQ,EAC3C,QAAQ,EAAE,QAAQ,IAAI,YAAY,CAAC,QAAQ,GAC7C,CACL,CAAC;AACN,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {useForkRef} from '../../../hooks';\nimport {block} from '../../utils/cn';\n\nimport type {TextAreaProps} from './TextArea';\n\ntype Props = Omit<TextAreaProps, 'autoComplete' | 'onChange' | 'controlProps'> & {\n    onChange: NonNullable<TextAreaProps['onChange']>;\n    autoComplete?: React.TextareaHTMLAttributes<HTMLTextAreaElement>['autoComplete'];\n    controlProps: NonNullable<TextAreaProps['controlProps']>;\n};\n\nconst b = block('text-area');\n\nconst calculateLinesByScrollHeight = (args: {\n    height: number;\n    paddingTop: number;\n    paddingBottom: number;\n    lineHeight: number;\n}) => {\n    const {height, lineHeight} = args;\n    const paddingTop = Number.isNaN(args.paddingTop) ? 0 : args.paddingTop;\n    const paddingBottom = Number.isNaN(args.paddingBottom) ? 0 : args.paddingBottom;\n\n    return (height - paddingTop - paddingBottom) / lineHeight;\n};\n\nexport function TextAreaControl(props: Props) {\n    const {\n        name,\n        id,\n        tabIndex,\n        autoComplete,\n        placeholder,\n        value,\n        defaultValue,\n        controlRef,\n        controlProps,\n        size,\n        rows,\n        minRows = 1,\n        maxRows,\n        autoFocus,\n        disabled,\n        readOnly,\n        onChange,\n        onFocus,\n        onBlur,\n        onKeyDown,\n        onKeyUp,\n        onKeyPress,\n    } = props;\n    const innerControlRef = React.useRef<HTMLTextAreaElement>(null);\n    const handleRef = useForkRef(controlRef, innerControlRef);\n    const textareaRows = rows || minRows;\n    const innerValue = value || innerControlRef?.current?.value;\n\n    const resizeHeight = React.useCallback(() => {\n        const control = innerControlRef?.current;\n\n        if (control && !rows) {\n            const controlStyles = getComputedStyle(control);\n            const lineHeight = parseInt(controlStyles.getPropertyValue('line-height'), 10);\n            const paddingTop = parseInt(controlStyles.getPropertyValue('padding-top'), 10);\n            const paddingBottom = parseInt(controlStyles.getPropertyValue('padding-bottom'), 10);\n            const linesWithCarriageReturn = (innerValue?.match(/\\n/g) || []).length + 1;\n            const linesByScrollHeight = calculateLinesByScrollHeight({\n                height: control.scrollHeight,\n                paddingTop,\n                paddingBottom,\n                lineHeight,\n            });\n\n            control.style.height = 'auto';\n\n            if (maxRows && maxRows < Math.max(linesByScrollHeight, linesWithCarriageReturn)) {\n                control.style.height = `${maxRows * lineHeight + 2 * paddingTop}px`;\n            } else if (linesWithCarriageReturn > 1 || linesByScrollHeight > 1) {\n                control.style.height = `${control.scrollHeight}px`;\n            }\n        }\n    }, [rows, maxRows, innerValue]);\n\n    React.useEffect(() => {\n        resizeHeight();\n    }, [resizeHeight, size, value]);\n\n    return (\n        <textarea\n            {...controlProps}\n            ref={handleRef}\n            style={{\n                ...controlProps.style,\n                height: rows ? 'auto' : undefined,\n            }}\n            className={b('control', controlProps.className)}\n            name={name}\n            id={id}\n            tabIndex={tabIndex}\n            placeholder={placeholder}\n            value={value}\n            defaultValue={defaultValue}\n            rows={textareaRows}\n            autoFocus={autoFocus}\n            autoComplete={autoComplete}\n            onChange={onChange}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            onKeyDown={onKeyDown}\n            onKeyUp={onKeyUp}\n            onKeyPress={onKeyPress}\n            disabled={disabled ?? controlProps.disabled}\n            readOnly={readOnly ?? controlProps.readOnly}\n        />\n    );\n}\n"]}