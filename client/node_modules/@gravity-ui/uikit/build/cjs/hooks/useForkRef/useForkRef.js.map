{"version":3,"file":"useForkRef.js","sourceRoot":"../../../../src","sources":["hooks/useForkRef/useForkRef.ts"],"names":[],"mappings":";;AAOA,gCAaC;;AApBD,qDAA+B;AAE/B,wCAAgC;AAKhC,SAAgB,UAAU,CAAI,GAAG,IAAwB;IACrD,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QACtB,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,CAAC,EAAE,CAAC;YACzD,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,OAAO,CAAC,KAAe,EAAE,EAAE;YACvB,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;gBACrB,IAAA,eAAM,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACvB,CAAC;QACL,CAAC,CAAC;QACF,uDAAuD;IAC3D,CAAC,EAAE,IAAI,CAAC,CAAC;AACb,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {setRef} from './setRef';\n\nexport type UseForkRefProps<K> = Array<React.Ref<K> | undefined>;\nexport type UseForkRefResult<W> = React.RefCallback<W> | null;\n\nexport function useForkRef<T>(...refs: UseForkRefProps<T>): UseForkRefResult<T> {\n    return React.useMemo(() => {\n        if (refs.every((ref) => ref === null || ref === undefined)) {\n            return null;\n        }\n\n        return (value: T | null) => {\n            for (const ref of refs) {\n                setRef(ref, value);\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, refs);\n}\n"]}